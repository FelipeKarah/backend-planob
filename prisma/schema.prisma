// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             String  @id @default(uuid())
  name           String
  cod            Float   @unique
  status         String  @default("Ativo")

  type           String
  brand          String
  unit           String
  baseCost       Float
  retailPrice    Float
  retailMargin   Float
  wholesalePrice Float
  minWholesaleQty Float
  wholesaleMargin Float
  bulkPrice      Float
  minBulkQty     Float
  bulkMargin     Float
  promoPrice     Float?
  promoStart     DateTime?
  promoEnd       DateTime?
  image          String?

  purchaseProducts PurchaseProducts[]

  @@map("products")
  OrderItem OrderItem[]
}

model Category {
  id        String  @id @default(uuid())
  name      String
  bannerUrl String?
  status    String  @default("Ativo")

  suppliers Supplier[]

  @@map("categories")
}

model Supplier {
  id         String  @id @default(uuid())
  name       String
  bannerUrl  String?
  cnpj       String?
  telephone  Float?
  email      String?
  categoryId String
  status     String  @default("Ativo")

  category Category @relation(fields: [categoryId], references: [id])

  purchases Purchase[]

  @@map("suppliers")
}

model User {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  cpf_cnpj  Float
  email     String @unique
  password  String
  status    String @default("Ativo")
  telephone Float
  cell      Float
  role      String

  address Address[]

  @@map("users")
  Order Order[]
}

model Address {
  id         String  @id @default(uuid())
  userId     String
  cep        Float
  road       String
  place      String
  number     Float
  district   String
  city       String
  state      String
  country    String
  latitude   Float
  longitude  Float
  status     String  @default("Ativo")
  inDelivery Boolean

  users User @relation(fields: [userId], references: [id])

  @@map("address")
}

model Purchase {
  id                String    @id @default(uuid())
  supplierId        String
  purchaseDate      DateTime
  paymentDate       DateTime?
  inPay             Boolean
  inBilletGenerated Boolean
  status            String    @default("Ativo")

  purchaseProducts PurchaseProducts[]

  supplier Supplier @relation(fields: [supplierId], references: [id])

  @@map("purchases")
}

model PurchaseProducts {
  id            String @id @default(uuid())
  purchaseId    String
  productId     String
  amount        Float
  unitaryValue  Float
  discountValue Float

  status String @default("Ativo")

  product  Product  @relation(fields: [productId], references: [id])
  purchase Purchase @relation(fields: [purchaseId], references: [id])

  @@map("purchaseProducts")
}


model Order {
  id              String        @id @default(uuid())
  customerName    String
  deliveryType    DeliveryType  @default(PICKUP)
  deliveryAddress String?
  deliveryNumber  String?
  cep             String?
  paymentMethod   PaymentMethod
  changeFor       String?
  deliveryFee     Float         @default(0)
  subtotal        Float
  totalAmount     Float
  status          OrderStatus   @default(PENDING)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String?       // Opcional, se quiser vincular a um usuário

  items OrderItem[]

  user User? @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id           String  @id @default(uuid())
  orderId      String
  productId    String
  productName  String
  quantity     Int
  unitPrice    Float
  priceType    PriceType
  originalPrice Float?
  totalPrice   Float
  createdAt    DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Enums para melhor organização
enum DeliveryType {
  DELIVERY
  PICKUP
}

enum PaymentMethod {
  PIX
  CARTAO
  DINHEIRO
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  DELIVERING
  DELIVERED
  CANCELLED
}

enum PriceType {
  RETAIL
  WHOLESALE
  PROMO
}